#!/usr/bin/perl -w

#####################################################################################################
#        Copyright (C) 2009, Jennifer Siepen & David Wedge, University of Manchester                #
#                                                                                                   #
#    This program is free software: you can redistribute it and/or modify                           #
#    it under the terms of the GNU General Public License as published by                           #
#    the Free Software Foundation, either version 3 of the License, or                              #
#    (at your option) any later version.                                                            #
#                                                                                                   #
#    This program is distributed in the hope that it will be useful,                                #
#    but WITHOUT ANY WARRANTY; without even the implied warranty of                                 #
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the                                  #
#    GNU General Public License for more details.                                                   #
#                                                                                                   #
#    You should have received a copy of the GNU General Public License                              #
#    along with this program.  If not, see <http://www.gnu.org/licenses/>.                          #
#                                                                                                   #
#                                                                                                   #
#####################################################################################################


use strict;
use DBI;
use CGI;
use CGI::Session;
use FileHandle;
use Benchmark;

#@Ritesh - Added to deal with file upload
use CGI::Carp qw(fatalsToBrowser);
use File::Basename;
use Data::Dumper;
use FindBin;
use lib "$FindBin::Bin/";#050210
#use lib "/var/www/localhost/cgi-bin/FDRAnalysis/";#DCW
use CreateCSVParamFileForOmssa;
use Cwd;

use File::stat;
use Time::localtime;

use Email::Valid;

#Ritesh - you will have to change these paths to get the script to run
#my $webpath = "http://www.ispider.manchester.ac.uk/FDRAnalysis/";#the web location of the static pages. Within this directory, you must have a directory called 'tmp', in which the files generated by the FDR code should be stored
my $webpath = "/FDRAnalysis/";#This shortened version works with my set-up, but may not always work
my $local_webpath = "/var/www/localhost/htdocs/FDRAnalysis/tmp/";#the local path to the 'tmp' directory referred to above

my $web_cgipath = "http://www.ispider.manchester.ac.uk/cgi-bin/FDRAnalysis/";#the web location of the perl scripts
#my $local_cgibin = "/var/www/localhost/cgi-bin/FDRAnalysis/";#the local path to the perl scripts referred to above
my $local_cgibin = "$FindBin::Bin/";#the local path to the perl scripts referred to above

my $local_dir = "/var/www/tmp/";#a local directory used to store temporary files

#Ritesh - you may have to change these SGE options, if you are using SGE.
#If not, you should comment out the lines at the bottom of this script referring to the shell script / SGE and uncomment the 'cmd' line
my $shelldir = "/tmp/";
my $QSUB = "/opt/sge/bin/lx26-amd64/qsub";
$ENV{'SGE_ROOT'} = "/opt/sge";
$ENV{'SGE_CELL'} = "ispider";
my $shell;#shell script for running SGE

my $cgi = new CGI;

my $sid=$cgi->param("sid");#allows retrieval of previous searches
my $debugger = 0;
my $refresh;
if($sid)
{

}
elsif($cgi->cookie("CGISESSID"))
{
	$sid = $cgi->cookie("CGISESSID");

	$refresh = $cgi->param("refresh");

	if($refresh)
	{
		#ADD random number to $sid to make it unique
		my $random_number = int(rand(1000000));
		$sid .= "_".$random_number;
	}

	$debugger = 2;
}
else
{
	$sid = undef;
	$debugger = 1;
}

my $session = new CGI::Session(undef, $sid, {Directory=>$local_dir});
my $cookie = $cgi->cookie(CGISESSID => $session->id );
print $cgi->header(-cookie => $cookie );

$sid = $session->id();

$session->param("result_access","wait");#default is 'wait'

#main_content($cgi->param("refresh"));
main_content($refresh);

footer();


#@Ritesh - Identifiers for the files after appending the session id in their names
my $file_Upload1;
my $file_Upload2;
my $file_Upload3;

my $file_Upload1_afterParserCall;
my $file_Upload2_afterParserCall;
my $file_Upload3_afterParserCall;

sub main_content()
{
	my $refresh = shift;
	my $results_ready = 1;
	my $file1;
	my $file2;
	my $file3;
	my $combine_param;

	#parameters for mzident
	my @fixed_mods;
	my @var_mods;
	if($refresh eq "true")
	{
		$file1=$cgi->param("input1");
		$file2=$cgi->param("input2");
		$file3=$cgi->param("input3");
		$combine_param = $cgi->param("combine");
		$session->param("combine", $combine_param);#260110
		my $graphics = $cgi->param("graphics_on");#160210
		#print("<br>refreshing. graphics= $graphics  combine= $combine_param <br>");
		$session->param("graphics", $graphics);#160210
		$session->param("paramsset",0);
		$session->param("nterminal", $cgi->param("nter"));

		@fixed_mods = $cgi->param("fixed_mods");
		@var_mods = $cgi->param("variable_mods");

		$session->param("missed",$cgi->param("missed_cleavages"));
		$session->param("enzyme",$cgi->param("enzyme"));
		$session->param("parent_mass_type",$cgi->param("parent_mass_type"));
		my $tolerance = $cgi->param("parent_tolerance") . " " . $cgi->param("parent_units");
		$session->param("result_access",$cgi->param("result_access"));
		$session->param("email",$cgi->param("email"));
		$session->param("parent_tolerance", $tolerance);
		$session->param("fragment_mass_type",$cgi->param("fragment_mass_type"));
		$tolerance = $cgi->param("fragment_tolerance") . " " . $cgi->param("fragment_units");
		$session->param("fragment_tolerance",$tolerance);
		my $filetype1=$cgi->param("SE1");
		$session->param("file_type1",$filetype1);
		#$session->param("file_type1",$cgi->param("SE1"));
		$session->param("file_type2",$cgi->param("SE2"));
		$session->param("file_type3",$cgi->param("SE3"));

		$results_ready=0;
	}

	my $refresh_browser;
	my $true = 0;
	my @FDR_image_file;
	my $summary_file;

	if($file1 ||($refresh ne "true" && $session->param("se1") == 1))
	{
		#print("checking file1");

		#$FDR_image_file[0] = $local_webpath . "se1_fdranalysis_" . $session->id . ".png";
		$FDR_image_file[0] = $local_webpath . $session->id . "_se1_fdranalysis" . ".png";
		if($refresh eq "true")
		{
			#my $tmp = $FDR_image_file[0];
			#$tmp =~ s/\.png/GygiRank\.png/;
 			#if(-e $tmp)
			#{
				#REMOVE IMAGE FILE
			#	my $cmd = "rm $tmp";
			#	system($cmd);
			#}
		}
		else
		{
			my $tmp = $FDR_image_file[0];
			$tmp =~ s/\.png/GygiRank\.png/;
			#("GYGI RANK FILE: ".$tmp."<br>");
 			if($session->param("graphics") && !-e $tmp)
 			{
				#print("<br>graphics file 1 not ready<br>");
 				$results_ready = 0;
				$refresh_browser = "true";
			}
		}
		$session->param('se1', 1);
		$session->flush();
	}
	else
	{
		$session->param('se1', 0);
		$session->flush();
	}
	
	if($file2 ||($refresh ne "true" && $session->param("se2") == 1))
	{
		#$FDR_image_file[1] = $local_webpath."se2_fdranalysis_" . $session->id . ".png";
		$FDR_image_file[1] = $local_webpath . $session->id . "_se2_fdranalysis" . ".png";
		if($refresh eq "true")
		{
			#my $tmp = $FDR_image_file[1];
			#$tmp =~ s/\.png/GygiRank\.png/;
 			#if(-e $tmp)
			#{
				#REMOVE IMAGE FILE
				#my $cmd = "rm $tmp";
				#system($cmd);
			#}
		}
		else
		{
			my $tmp = $FDR_image_file[1];
			$tmp =~ s/\.png/GygiRank\.png/;
 			if($session->param("graphics") && !-e $tmp)
 			{
				#print("<br>graphics file 2 not ready<br>");
 				$results_ready = 0;
				$refresh_browser = "true";
			}
		}
		$session->param('se2', 1);
		$session->flush();
	}
	else
	{
		$session->param('se2', 0);
		$session->flush();
	}
	
	if($file3 || ($refresh ne "true" && $session->param("se3") == 1))
	{
		#$FDR_image_file[2] = $local_webpath."se3_fdranalysis_" . $session->id . ".png";
		$FDR_image_file[2] = $local_webpath . $session->id . "_se3_fdranalysis" . ".png";
		if($refresh eq "true")
		{
			#my $tmp = $FDR_image_file[2];
			#$tmp =~ s/\.png/GygiRank\.png/;
 			#if(-e $tmp)
			#{
				#REMOVE IMAGE FILE
			#	my $cmd = "rm $tmp";
			#	system($cmd);
			#}
		}
		else
		{
			my $tmp = $FDR_image_file[2];
			$tmp =~ s/\.png/GygiRank\.png/;
 			if($session->param("graphics") && !-e $tmp)
 			{
				#print("<br>graphics file 3 not ready<br>");
 				$results_ready = 0;
				$refresh_browser = "true";
			}
		}
		$session->param('se3', 1);
		$session->flush();
	}
	else
	{
		$session->param('se3', 0);
		$session->flush();
	}

	$summary_file = $local_webpath . $session->id . "_summary.txt";
	if($refresh eq "true")
	{
		my $cmd = "rm $summary_file";
		system($cmd);
	}
   	elsif(!-e $summary_file)
   	{
		#print("<br>summary file not ready<br>");
		$results_ready = 0;
   		$refresh_browser = "true";
  	}

	if($combine_param || $session->param("combine") == 1)
	#if($combine_param)
	{
		my $tmp = $local_dir . $session->id . "combined_peptides.out";
		if($refresh eq "true")
		{
			my $cmd = "rm $tmp";
			system($cmd);
		}
		#DCW - debugging - don't wait for combined file
   		#elsif(!-e $tmp || -z $tmp)
   		#{
		#	$results_ready = 0;
   		#	$refresh_browser = "true";
  		#}
  		$session->param('combine', 1);
  		$session->flush();
  	}
  	else
  	{
  		$session->param('combine', 0);
  		$session->flush();
	}

	$refresh="false";
	
	if(!$session->param("paramsset"))
	{
		#print "<br>setting params<br>";

		#moved to here 091209
		if(!$session->param("se3") && !$session->param("se2") && !$session->param("se1"))
  		{
			my $sid = $session->id();
			ErrorMsg("You need to run a search before you can view the results.<br>(session ID=$sid)");
			exit(1);
		}

		$session->param("paramsset",1);
		$results_ready = 0;
		$refresh_browser = "true";

		my $params = $local_dir."fdranalysis_param_" . $session->id . ".txt";
		my $cmd = "rm $params";
		system($cmd);

		##First file
		if($file1)
		{
			#deal with the rev_file
			my $tmpFile = DealWithFileUpload($file1,"input1",$session->param("file_type1"));#091209
			$file_Upload1 = $tmpFile;
			#write the parameters to the param file
			open(PARAM,">$params") or die "unable to open the file $params to write to\n";
			print PARAM "se1_rev_file\t" . $tmpFile . "\n";#091209
			print PARAM "se1_search_type\tconcatenated forward\n";
			print PARAM "se1_image\t" . $FDR_image_file[0] . "\n";
			close PARAM;
		}

		##Second file
		if($file2)
		{
			#deal with the rev_file
			my $tmpFile = DealWithFileUpload($file2,"input2",$session->param("file_type2"));#091209
			$file_Upload2 = $tmpFile;
			#write the parameters to the param file
			open(PARAM,">>$params") or die "unable to open the file $params to write to\n";
			print PARAM "se2_rev_file\t" . $tmpFile . "\n";#091209
			print PARAM "se2_search_type\tconcatenated forward\n";
			print PARAM "se2_image\t" . $FDR_image_file[1] . "\n";
			close PARAM;
		}

		##Third file
		if($file3)
		{
			#deal with the rev_file
			my $tmpFile = DealWithFileUpload($file3,"input3",$session->param("file_type3"));#091209
			$file_Upload3 = $tmpFile;
			#write the parameters to the param file
			open(PARAM,">>$params") or die "unable to open the file $params to write to\n";
			print PARAM "se3_rev_file\t" . $tmpFile . "\n";#091209
			print PARAM "se3_search_type\tconcatenated forward\n";
			print PARAM "se3_image\t" . $FDR_image_file[2] . "\n";
			close PARAM;
		}		

		my $tmpParam;#091209

		#$session->param("nterminal", $cgi->param("nter"));
		open(PARAM,">>$params") or die "unable to open the file $params to write to\n";
		print PARAM "analysis_type\t" . $session->param("nterminal") . "\n";#091209
		close PARAM;

		if($combine_param)
		{
			open(PARAM,">>$params") or die "unable to open the file $params to write to\n";
			print PARAM "combine\t" . $combine_param . "\n";
			close PARAM;
		}
		open(PARAM,">>$params") or die "unable to open the file $params to write to\n";
		print PARAM "oversize\t" . $cgi->param("oversize") . "\n";
		close PARAM;

		$tmpParam = $cgi->param("max_expect");
	   	$session->param('max_expect', $tmpParam);
		$tmpParam = $cgi->param("fdr_value");
	   	$session->param('fdr_value', $tmpParam);
		$tmpParam = $cgi->param("rev_tag");
		$session->param('rev_tag', $cgi->param("rev_tag"));
	   	open(PARAM,">>$params") or die "unable to open the file $params to write to\n";
	   	print PARAM "max_expect\t" . $session->param("max_expect") . "\n";
	   	print PARAM "fdr_value\t" . $session->param("fdr_value") . "\n";
	   	print PARAM "rev_tag\t" . $session->param("rev_tag") . "\n";

		#parameters for mzident
		print PARAM "missed_cleavages\t" . $session->param("missed") . "\n";
		print PARAM "enzyme\t" . $session->param("enzyme") . "\n";
		print PARAM "parent_mass_type\t" . $session->param("parent_mass_type") . "\n";
		print PARAM "parent_tolerance\t" . $session->param("parent_tolerance") . "\n";
		print PARAM "fragment_mass_type\t" . $session->param("fragment_mass_type") . "\n";
		print PARAM "fragment_tolerance\t" . $session->param("fragment_tolerance") . "\n";
		my $line = "fixed_mods";
		foreach my $mod (@fixed_mods)
		{
   			$line .= "\t" . $mod;
		}
		print PARAM $line . "\n";
		$line = "variable_mods";
		foreach my $mod (@var_mods)
		{
   			$line .= "\t" . $mod;
		}
		print PARAM $line . "\n";

	   	close PARAM;

		if(!$session->param("max_expect"))
		{
			ErrorMsg("You must set a maximum expectation value to use\n");
			exit(1);
		}
		if(!$session->param("fdr_value"))
		{
			ErrorMsg("You must set a maximum FDR value to use\n");
			exit(1);
		}
		if($session->param("fdr_value")>0.5)
		{
			ErrorMsg("The maximum FDR value is 0.5.\n");
			exit(1);
		}
		
		$session->flush();
		#RunAnalysis($params);		
		RunAnalysis();		
	}
	
	if($session->param("result_access") eq "email")
	{
		#$session->param("result_access","wait");

		InfoMsg("A download link will be emailed to you once the analysis is complete.\n");
		#InfoMsg("A download link has been emailed to you.\n");
		#backButton();
		#exit(1);
		exit(0);
	}

	start_html($refresh_browser);

	if($results_ready == 0)
	{
		my $statusText=$session->param("status_text");
		#my $statusFile = $session->param("statusFile");
		my $statusFile = $local_webpath . $session->id . "_status.txt";
		if (-e $statusFile)
		{
			my $date_string = ctime(stat($statusFile)->mtime);
			#print("<br>date_string: $date_string<br>");
			my $timestamp = $session->param('status_timestamp');
			#print("<br>timestamp:$timestamp*<br>");
			if(!$timestamp || $date_string ne $timestamp)
			{
				#print("<br>timestamp changed<br>");
				$statusText = "Program status: ";
				open(STATUSFILE, "<$statusFile");
				while(my $line = <STATUSFILE>)
				{
					$statusText .= $line;
					$statusText =~s/_/ /g;
				}
				close(STATUSFILE);
				$session->param("status_text",$statusText);
				#print("<br>setting timestamp: $date_string<br>");
				$session->param('status_timestamp',$date_string);
				$session->flush();
			}
		}
		#my $delcmd="qacct -j  242482";
		#system($delcmd);
		system("qstat\n");

		print  $cgi->div({id=>"main_result"},
			$cgi->div({id=>"content"},
                     $cgi->br(),
			$cgi->p("The analysis is running. Please be patient this shouldn't take too long."),
			$cgi->p("This page should automatically refresh. If it doesn't please click ",$cgi->a({href=>$web_cgipath."FDR_analysis_static.pl"},"here")),
			$cgi->p($cgi->font({color=>"red"},$statusText)),
 			$cgi->br(),
			$cgi->img({src=>$webpath."Waiting.gif"}),
			$cgi->br(),
			$cgi->br()
             		)
       	);
 	} 
	else
	{
		#change all image files to a url
		my $path_to_tmp = $webpath."tmp/";
		for(my $i=0 ; $i<scalar(@FDR_image_file) ; $i++)
		{ 
			#$FDR_image_file[$i] =~ s/\/var\/www\/localhost\/htdocs/http:\/\/ispider.smith.man.ac.uk/;
			$FDR_image_file[$i] =~ s/$local_webpath/$path_to_tmp/;
		}
		my $final_image_line;
		my $blurb;
		my $title;
		if(!$cgi->param("result_view") || $cgi->param("result_view") eq "summary")
		{
			#only one summary file
			my $summary_file = $local_webpath . $session->id . "_summary.txt";
			open(FILE,"<$summary_file") or print "can't open the summary $summary_file\n";
			while(my $line = <FILE>)
			{
				$blurb .= $line;
				#$blurb .= "<BR><BR>";
			}
			close FILE;

			my $out_peptideOutput = $local_dir."peptideOutput_".$session->id.".txt";
			my $new_peptideOutput = $out_peptideOutput;
			$new_peptideOutput =~ s/$local_dir/$local_webpath/;
			my $cmd = "cp " . $out_peptideOutput . " " . $new_peptideOutput;
			system($cmd);
			my $path_to_tmp = $webpath."tmp/";
			$new_peptideOutput =~ s/$local_webpath/$path_to_tmp/;
			$blurb .= "<BR><font size=-2><I><B><sup>\#</sup></B> FDR method as decsribed in Kall et al. (2008) J. Proteome Res. 7:29-34.</I></FONT>"; 
			$blurb .= "<BR><font size=-2><I><B>*</B> Combined method as described in Jones et al. (2009) Proteomics 9: 1220-9.</I></FONT>";

			my $nter = $session->param("nterminal");
			if($session->param("nterminal"))
			{
				$blurb .= "<br><font size=-2><I>Numbers in brackets indicate the number of N-terminal peptides identified</i></FONT>";
			}

			#$blurb .=  "<BR><BR><P>To download a list of identified peptides/proteins please click <a href=\"$newpeplist\" target=\"top\">here</a><BR>";
			$blurb .=  "<BR><BR><P>To download a list of identified peptides/proteins please click <a href=\"$new_peptideOutput\" target=\"top\">here</a><BR>";

			if($session->param("combine") == 1)
			{
				my $combinedlist = $new_peptideOutput;#DCW - temporary fix, download peptideOutput
				$blurb .=  "<BR><P>To download a list of identified peptides from the combined analysis please click <a href=\"$combinedlist\" target=\"top\">here</a><BR>";
				my $newProtAmbigFile = $local_dir."FinalProtAmbg_".$session->id.".mzid";
				$newProtAmbigFile =~ s/$local_dir/$path_to_tmp/;
				$blurb .=  "<BR><P>To download results from the combined analysis in mzident format please click <a href=\"$newProtAmbigFile\" target=\"top\">here</a><BR>";
			}

			$title = "Results Summary";
		}
		elsif($cgi->param("result_view") eq "rankplot")
		{
			#for all results sets
			for(my $i=0 ; $i<scalar(@FDR_image_file) ; $i++)
			{
				if($FDR_image_file[$i])
				{
					$FDR_image_file[$i] =~ s/\.png/GygiRank\.png/;
					$final_image_line .= "<IMG SRC=\"$FDR_image_file[$i]\" title=\"Rank plot image\">";
				}			
			}
			$blurb = "<BR><P>This plot is the percentage of target and decoy hits at different identified ranks where the rank 1 peptide has an expect value of " . $session->param("max_expect") . " or less.  Rank 1 should have very few decoy hits whereas rank 2 and later ranks should have approximately 50% target and 50% decoy hits (as these ranks represent false positives)<br><FONT size=-2>(Graph based on that of <i>Elias & Gygi (2007) Nat. Methods 4: 207-214</i>).";
			$title = "Rank Plot";
		}
		elsif($cgi->param("result_view") eq "deltamass")
		{
			for(my $i=0 ; $i<scalar(@FDR_image_file) ; $i++) 
			{
				if($FDR_image_file[$i])
				{
					$FDR_image_file[$i] =~ s/\.png/DeltaMass\.png/;
					$final_image_line .=  "<IMG SRC=\"$FDR_image_file[$i]\" title=\"Rank plot image\">";
				}
			}
			$blurb = "<BR><P>This is a plot of score vs. delta mass difference for all identifications. Delta mass is defined as the difference between the experimental and theoretical masses.  A normal distribution around Delta Mass=0 is expected.";
			$title = "Delta Mass";
		}
		elsif($cgi->param("result_view") eq "nterdist")
		{
			for(my $i=0 ; $i<scalar(@FDR_image_file) ; $i++)
                     {
				if($FDR_image_file[$i])
				{
					$FDR_image_file[$i] =~ s/\.png/NterDist\.png/;
					$final_image_line .=  "<IMG SRC=\"$FDR_image_file[$i]\" title=\"Start position  plot image\">";
				}
			}
			$blurb = "<BR><P>This plot is part of the N-terminal proteome analysis pipeline.  This analysis specifically targets the N-terminal peptides and, as a result, the target hits should be located predominantly at positions 1 and 2 of a protein and the decoy hits scattered randomly amongst all other positions.";
			#$title = "N-terminal distribution";
			$title = "Start Position Distribution";#DCW 180110
		}
		elsif($cgi->param("result_view") eq "scoredist")
		{
			for(my $i=0 ; $i<scalar(@FDR_image_file) ; $i++)
                     {
				if($FDR_image_file[$i])
				{
					$FDR_image_file[$i] =~ s/\.png/ScoreDist\.png/;
					$final_image_line .=  "<IMG SRC=\"$FDR_image_file[$i]\" title=\"Score distribution plot image\">";
				}
			}
			if($session->param('combine'))
			{
				my $consensus_graphics_file = $webpath . "tmp/" . $sid . "_consensus_fdranalysis" . "ScoreDist.png";
				$final_image_line .=  "<IMG SRC=\"$consensus_graphics_file\" title=\"Score distribution plot image\">";
			}
			$blurb = "<BR><P>This plot is the distribution of scores for both the target and decoy hits.  Two normal distributions should be evident: a distribution for decoy hits centered around a poor score and a separate distribution for the target hits, centered around a better score.";
			$title = "Score distribution";
		}
		elsif($cgi->param("result_view") eq "zoomscore")
		{
			for(my $i=0 ; $i<scalar(@FDR_image_file) ; $i++)
			{
				if($FDR_image_file[$i])
				{
					$FDR_image_file[$i] =~ s/\.png/ZoomScore\.png/;
					$final_image_line .=  "<IMG SRC=\"$FDR_image_file[$i]\" title=\"Zoomed Score distribution plot image\">";
				}
			}
			if($session->param('combine'))
			{
				my $consensus_graphics_file = $webpath . "tmp/" . $sid . "_consensus_fdranalysis" . "ZoomScore.png";
				$final_image_line .=  "<IMG SRC=\"$consensus_graphics_file\" title=\"Zoomed Score distribution plot image\">";
			}
			$blurb = "<BR><P>This plot shows the estimated distribution of correct and incorrect spectra at different scores, after allowing for decoy hits.  The two distributions should be separate, with the incorrect distribution centered at the poorer scores and the correct distribution at the more confident scores.";
			$title = "Estimated Correct / Incorrect Spectra";
		} 
		elsif($cgi->param("result_view") eq "combined")
		{
			my $imagefile = $webpath."tmp\/" . $session->id . "_VennDiagram.png";

			if($session->param("combine") == 1)
			{
				my $combinedimage = $webpath."tmp\/" . $session->id . "_CombinedVennDiagram.png";
				$final_image_line .=  "<IMG SRC=\"$imagefile\" title=\"Venn diagram of Individual Identification results\"><P>This plot represents the overlap of peptide identifications after combining the results using the FDRScore* method at FDR** " . $session->param("fdr_value") . " or better.<BR><!--P--><FONT size=-2><I>*Jones et al. (2009) Proteomics 9: 1220-9.</I><!--P--><BR><I>**Kall et al. (2008) J. Proteome Res. 7:29-34</I><BR><IMG SRC=\"$combinedimage\" title=\"Venn diagram of Peptides identified from the combined analysis\"><BR>";
			}
			else
			{
				$final_image_line .=  "<IMG SRC=\"$imagefile\" title=\"Venn diagram of Individual Identification results\">";
			}
			$blurb = "<BR><P>This plot represents the overlap of peptide identification from the different search engines at FDR* " . $session->param("fdr_value") . " or better.";
			$blurb .= "<BR><font size=-2><I><b>*</b> Kall et al. (2008) J. Proteome Res. 7:29-34</i></FONT>";
			$title = "Overlap of Peptides from different search engines";
		}

		if($session->param("graphics"))
		{
			print  $cgi->div({id=>"main_result"},
				$cgi->div({id=>"content"},
					$cgi->br(),
					$cgi->h2($title),
 					$cgi->br(),
					$cgi->table(
						$cgi->Tr(
							$cgi->td({valign=>"top"},
								$cgi->div({id=>"nav"},
              	                     			$cgi->table(
										$cgi->th($cgi->p("Select display format")),
              	                            			$cgi->Tr( 
											$cgi->td(
												$cgi->ul(
              	                  								$cgi->li($cgi->a({href=>$web_cgipath."FDR_analysis_static.pl?result_view=summary"},"Summary")),
													$cgi->li($cgi->a({href=>$web_cgipath."FDR_analysis_static.pl?result_view=combined"},"Peptide Overlap")),
													$cgi->li($cgi->a({href=>$web_cgipath."FDR_analysis_static.pl?result_view=rankplot"},"Rank plot")),
              	                 								$cgi->li($cgi->a({href=>$web_cgipath."FDR_analysis_static.pl?result_view=deltamass"},"Delta Mass")),
              	                  								$cgi->li($cgi->a({href=>$web_cgipath."FDR_analysis_static.pl?result_view=scoredist"},"Score Distribution")),
													$cgi->li($cgi->a({href=>$web_cgipath."FDR_analysis_static.pl?result_view=nterdist"},"Start Position Distribution")),
													$cgi->li($cgi->a({href=>$web_cgipath."FDR_analysis_static.pl?result_view=zoomscore"},"Estimated Correct/Incorrect"))
												)
											)
										)
									)
								)
							),
              	              		$cgi->td(
								$cgi->p($blurb)
							)
						),
						$cgi->Tr(
							$cgi->td($cgi->br()),
							$cgi->td($final_image_line)
                				)
					)
				)
			);
		}
		else
		{
			print  $cgi->div({id=>"main_result"},
				$cgi->div({id=>"content"},
					$cgi->br(),
					$cgi->h2($title),
 					$cgi->br(),
					$cgi->table(
						$cgi->Tr(
							$cgi->td({valign=>"top"},
								$cgi->div({id=>"nav"},
              	                     			$cgi->table(
										$cgi->th($cgi->p("Select display format")),
              	                            			$cgi->Tr( 
											$cgi->td(
												$cgi->ul(
              	                  								$cgi->li($cgi->a({href=>$web_cgipath."FDR_analysis_static.pl?result_view=summary"},"Summary")),
													$cgi->li($cgi->a({href=>$web_cgipath."FDR_analysis_static.pl?result_view=combined"},"Peptide Overlap")),
												)
											)
										)
									)
								)
							),
              	              		$cgi->td(
								$cgi->p($blurb)
							)
						),
						$cgi->Tr(
							$cgi->td($cgi->br()),
							$cgi->td($final_image_line)
                				)
					)
				)
			);
		}
	}
	#backButton();
}

#DCW 101209 - not currently used
sub backButton()
{
	print  $cgi->div({id=>"main_result"},
		$cgi->div({id=>"content"},
			$cgi->br(),
			$cgi->start_form(-name=>'fdr_search',-action=>$webpath."FDR_analysis_search.html", -method=>"post"),
			$cgi->submit(-value=>"New Analysis", id=>'textarea_border'),
			$cgi->end_form(),
			$cgi->br()
		)
        );
}


sub footer()
{
	print $cgi->div({id=>"footer"},
	$cgi->div({id=>"path"},
	$cgi->p("Copyright &copy; 2010",$cgi->a({href=>"mailto:david.wedge\@manchester.ac.uk"},"David Wedge"), "& Jennifer Siepen")));
}


sub navigation_bar()
{
	print $cgi->div({id=>"navigation"},
		$cgi->table({width=>"100%"},
 			$cgi->td($cgi->a({href=>$webpath."FDR_analysis_home.html"},$cgi->img({width=>"60",height=>"50",alt=>"link to home",title=>"HOME",src=>$webpath."home.jpg"}))),
              	$cgi->td($cgi->a({href=>$webpath."FDR_analysis_search.html"},$cgi->img({title=>"SEARCH", width=>"60",height=>"50",alt=>"link to search",src=>$webpath."search.jpg"}))),
			$cgi->td($cgi->a({href=>"FDR_analysis_static.pl"},$cgi->img({title=>"ANALYSE",width=>"60",height=>"50",alt=>"link to FDR analysis",src=>$webpath."analysis.jpg"}))),
			$cgi->td($cgi->a({href=>$webpath."FDR_analysis_help.html"},$cgi->img({title=>"HELP", width=>"60",height=>"50",alt=>"link to help",src=>$webpath."help.jpg"}))),
			$cgi->td($cgi->a({href=>"mailto:david.wedge\@manchester.ac.uk"},$cgi->img({title=>"CONTACT",width=>"60",height=>"50",alt=>"link to contact",src=>$webpath."contact.jpg"})))
		)
 	);
}

sub ErrorMsg()
{
	my $line = shift;

	start_html();
	print  $cgi->div({id=>"main_result"},
                $cgi->div({id=>"content"},
                	$cgi->br(),
			$cgi->p("Error:", $line),
                )
        );
}

sub InfoMsg()
{
	my $line = shift;

	start_html();
	print  $cgi->div({id=>"main_result"},
                $cgi->div({id=>"content"},
                	$cgi->br(),
			$cgi->p($line),
                )
        );
}

sub start_html()
{
	my $refresh = shift;
	header($refresh);
	navigation_bar();
}

sub header()
{
	my $refresh = shift;
	if($refresh)
	{
		print $cgi->start_html(
			-head=>$cgi->meta({-http_equiv=>'refresh',-content=>"3;FDR_analysis_static.pl"}),
			-title=>'FDR Analysis',
			-style=>{'src'=>$webpath.'fdranalysis.css','media'=>'screen, tv, projection','title'=>'Default'},
		);
	}
	else
	{
		print $cgi->start_html(
			-title=>'FDR Analysis',
			-style=>{'src'=>$webpath.'fdranalysis.css','media'=>'screen, tv, projection','title'=>'Default'},
		);
	}
}

# @Ritesh -  changed...
sub DealWithFileUpload
{
	my $file = shift;
	my $formIdentifier = shift;
	my $file_type = shift;

	my $safe_filename_characters = "a-zA-Z0-9_.-";

	my ( $name_m, $path_m, $extension_m ) = fileparse ( $file, '\..*' );  
	$file = $name_m. "_$sid" . $extension_m; 		## Add the session-id in the name to make it distinguishable
	$file =~ tr/ /_/;  
	$file =~ s/[^$safe_filename_characters]//g;
	
	my $upload_filehandle = $cgi->upload("$formIdentifier");
	
	#print "\n\nfilehandle= $upload_filehandle \t $file";
	
	### File upload #####
	open (UPLOADFILE_M, ">$local_dir".$file) or die "$!";  
	binmode UPLOADFILE_M;   
	while ( <$upload_filehandle> )  
	{  
		 print UPLOADFILE_M;  
	}   
	close UPLOADFILE_M;

	return $file;
}



#Ritesh - to run your code, replace the cmd and command-line options with your call
sub RunAnalysis
{
	my $sid = $session->id();

	# Determine the uploaded file types
	my $file1_type = $cgi->param("SE1");
	my $file2_type = $cgi->param("SE2");
	my $file3_type = $cgi->param("SE3");

	# Determine the reverse string and decoy size
	my $revString = $cgi->param("rev_tag");	
	my $decoySize = $cgi->param("oversize");
	

	# testing the code...for param file creation...
	my $omssaParamFileName = createParamFileForParsers();
	my $tandemParamFileName = $local_cgibin."Parsers/example_tandem_params.csv";

	$shell = $shelldir."RunFDRAnalysis_" . $session->id . ".sh";

	open(SHELL,">$shell") or die "unable to create a shell file, $shell\n";
	print SHELL "#!/bin/sh \n";
	close SHELL;

	# If any of the files are not in MzIdentML format, call the parser
	#if(($file1_type ne 'Mzident')|| ($file2_type ne 'Mzident') ||($file1_type ne 'Mzident')){
		callTheMzIdentMLParser($file_Upload1,$file1_type,$file_Upload2,$file2_type,$file_Upload3,$file3_type,$omssaParamFileName,$tandemParamFileName);
	#}	
	

	# Determine the uploaded file names
	#my $file_1 = $file_Upload1_afterParserCall ;
	#my $file_2 = $file_Upload2_afterParserCall ;
	#my $file_3 = $file_Upload3_afterParserCall ;
	my $file_1 = $session->param("file1_after_parser");
	my $file_2 = $session->param("file2_after_parser");
	my $file_3 = $session->param("file3_after_parser");
		
	############### determine the file types for each file.....###############################
	my $file1_searchEngine;
	if (($file1_type eq 'Mascot (.dat File)')|| ($file1_type eq 'Mascot (.mzid File)')){
		$file1_searchEngine = 'mascot';
	}elsif (($file1_type eq 'OMSSA (.csv File)') || ($file1_type eq 'OMSSA (.mzid File)')){
		$file1_searchEngine = 'omssa';
	}elsif (($file1_type eq 'X!Tandem (.xml File)') || ($file1_type eq 'X!Tandem (.mzid File)')){
		$file1_searchEngine = 'X!Tandem';
	}
	
	
	my $file2_searchEngine;
	if (($file2_type eq 'Mascot (.dat File)') || ($file2_type eq 'Mascot (.mzid File)')){
		$file2_searchEngine = 'mascot';
	}elsif (($file2_type eq 'OMSSA (.csv File)') || ($file2_type eq 'OMSSA (.mzid File)')){
		$file2_searchEngine = 'omssa';
	}elsif (($file2_type eq 'X!Tandem (.xml File)') || ($file2_type eq 'X!Tandem (.mzid File)')){
		$file2_searchEngine = 'X!Tandem';
	}
		
	
	my $file3_searchEngine;
	if (($file3_type eq 'Mascot (.dat File)') || ($file3_type eq 'Mascot (.mzid File)')){
		$file3_searchEngine = 'mascot';
	}elsif (($file3_type eq 'OMSSA (.csv File)') || ($file3_type eq 'OMSSA (.mzid File)')){
		$file3_searchEngine = 'omssa';
	}elsif (($file3_type eq 'X!Tandem (.xml File)') || ($file3_type eq 'X!Tandem (.mzid File)')){
		$file3_searchEngine = 'X!Tandem';
	}
		
	##########################################################################################
	
	
	my $out_peptideOutput = $local_dir."peptideOutput_".$sid.".txt";
	my $out_verbosePeptideOutput = $local_dir."verboseOutput_".$sid.".txt";
	my $out_tabForMzId = $local_dir."tabForMzID_".$sid.".txt";
	my $out_csvForMzId = $local_dir."csvForMzID_".$sid.".csv";
	
	open(PARAM,">RunCmd.txt"); 
	
	# this gives correct path
	print PARAM "\n \n $file_1 \t $file_2 \t $file_3 \t ";

	my @FDR_image_file;
	#$FDR_image_file[0] = $local_webpath . "se1_fdranalysis_" . $sid . ".png";
	#$FDR_image_file[1] = $local_webpath . "se2_fdranalysis_" . $sid . ".png";
	#$FDR_image_file[2] = $local_webpath . "se3_fdranalysis_" . $sid . ".png";
	$FDR_image_file[0] = $local_webpath . $sid . "_se1_fdranalysis" . ".png";
	$FDR_image_file[1] = $local_webpath . $sid . "_se2_fdranalysis" . ".png";
	$FDR_image_file[2] = $local_webpath . $sid . "_se3_fdranalysis" . ".png";
	my $summary_file = $local_webpath . $sid . "_summary.txt";

	my $email_cmd;
	if($session->param("result_access") eq "email")
	{
		if(validateEmail($session->param("email")))
		{
			#sendEmail($session->param("email"), $session->id());
			my $emailAddress = $session->param("email");
			my $file_list = $local_webpath."peptideOutput_".$sid.".txt";
			$file_list .= ",".$local_webpath.$sid."_summary.txt";
			$email_cmd = "perl SendEmail.pl $emailAddress $sid $file_list";
			#$email_cmd = "perl RunSendEmail.pl $emailAddress $sid $file_list";
		}
	}
	
	# The command string to run the FDR code...
	#my $cmd = "perl Ritesh_mzIdentMLPipeline.pl -J $file_1 -K $file_2  -L $file_3  -X mascot -Y omssa -Z X!Tandem -D $decoySize -I $revString -O $out_peptideOutput -V $out_verbosePeptideOutput -A $out_tabForMzId -P $out_csvForMzId -B $summary_file";
	my $cmd = "perl Ritesh_mzIdentMLPipeline.pl";
	if($file_1)
	{
		$cmd .= " -J $file_1";
		$cmd .= " -S $FDR_image_file[0]";
		if($email_cmd)
		{
			$email_cmd .= ",".$local_webpath.$sid."_se1_fdranalysisGygiRank.png";
		}
	}
	if($file_2)
	{
		$cmd .= " -K $file_2";
		$cmd .= " -T $FDR_image_file[1]";
		if($email_cmd)
		{
			$email_cmd .= ",".$local_webpath.$sid."_se2_fdranalysisGygiRank.png";
		}
	}
	if($file_3)
	{
		$cmd .= " -L $file_3";
		$cmd .= " -U $FDR_image_file[2]";
		if($email_cmd)
		{
			$email_cmd .= ",".$local_webpath.$sid."_se3_fdranalysisGygiRank.png";
		}
	}
	$cmd .= " -X $file1_searchEngine -Y $file2_searchEngine -Z $file3_searchEngine -D $decoySize -I $revString -O $out_peptideOutput -V $out_verbosePeptideOutput -A $out_tabForMzId -P $out_csvForMzId -C ".$session->param('max_expect')." -B $summary_file";

	#$cmd .= " -R 10";#TEST max rank param

	print PARAM "\n\n $cmd";
	
	my $currentWorkdir = getcwd();
	
	# call the FDR perl program
	#chdir($local_cgibin."MzIdentMLPipeline"); # DCW - change directory to where the source code is...
	#system($cmd);         
	#chdir($currentWorkdir); # come back to the original directory

	#my $delcmd="qdel 242444";
	#system($delcmd);
	#$delcmd="qdel 239732";
	#system($delcmd);

	my $statusFile = $summary_file;
	$statusFile =~s/summary/status/;
	#$session->param("statusFile", $statusFile);
	
	#DCW - use SGE
	open(SHELL,">>$shell") or die "unable to open shell file, $shell\n";
	print SHELL "cd ".$local_cgibin."\n";
	print SHELL "perl WriteStatus.pl -F $statusFile -T Running_FDR_Analysis\n";
	print SHELL "cd ".$local_cgibin."MzIdentMLPipeline"."\n";
	print SHELL $cmd;
	print SHELL "\n";


	#Graphics commands
	my $mascot_file;
	my $omssa_file;
	my $tandem_file;
	my $mascot_graphics_file;
	my $omssa_graphics_file;
	my $tandem_graphics_file;
	#DCW 270110. This is inefficient  and error-prone: the same check is carried out in Ritesh_mzIdentMLPipeline.
	#It is also inflexible - there may be other search engines
	if($file_1)
	{
		if($file1_searchEngine eq 'mascot')
		{
			$mascot_file = $file_1;
			$mascot_graphics_file = $FDR_image_file[0];
		}
		elsif($file1_searchEngine eq 'omssa')
		{
			$omssa_file = $file_1;
			$omssa_graphics_file = $FDR_image_file[0];
		}
		elsif($file1_searchEngine eq 'X!Tandem')
		{
			$tandem_file = $file_1;
			$tandem_graphics_file = $FDR_image_file[0];
		}
	}
	if($file_2)
	{
		if($file2_searchEngine eq 'mascot')
		{
			$mascot_file = $file_2;
			$mascot_graphics_file = $FDR_image_file[1];
		}
		elsif($file2_searchEngine eq 'omssa')
		{
			$omssa_file = $file_2;
			$omssa_graphics_file = $FDR_image_file[1];
		}
		elsif($file2_searchEngine eq 'X!Tandem')
		{
			$tandem_file = $file_2;
			$tandem_graphics_file = $FDR_image_file[1];
		}
	}
	if($file_3)
	{
		if($file3_searchEngine eq 'mascot')
		{
			$mascot_file = $file_3;
			$mascot_graphics_file = $FDR_image_file[2];
		}
		elsif($file3_searchEngine eq 'omssa')
		{
			$omssa_file = $file_3;
			$omssa_graphics_file = $FDR_image_file[2];
		}
		elsif($file3_searchEngine eq 'X!Tandem')
		{
			$tandem_file = $file_3;
			$tandem_graphics_file = $FDR_image_file[2];
		}
	}

	if($session->param("graphics"))
	{
		print SHELL "cd ".$local_cgibin."\n";
		print SHELL "perl WriteStatus.pl -F $statusFile -T Producing_Graphics\n";
		print SHELL "cd ".$local_cgibin."MzIdentMLPipeline"."\n";

		my $expect = $session->param('max_expect');
		if($mascot_file)
		{
			$cmd = "perl RunGraphics.pl -F $mascot_file -S mascot -G $mascot_graphics_file -R $revString -M $expect -D $decoySize\n";
			print SHELL $cmd;
		}
		if($omssa_file)
		{
			$cmd = "perl RunGraphics.pl -F $omssa_file -S omssa -G $omssa_graphics_file -R $revString -M $expect -D $decoySize\n";
			print SHELL $cmd;
		}
		if($tandem_file)
		{
			$cmd = "perl RunGraphics.pl -F $tandem_file -S X!Tandem -G $tandem_graphics_file -R $revString -M $expect -D $decoySize\n";
			print SHELL $cmd;
		}

		if($session->param("combine"))
		{
			my $consensus_graphics_file = $local_webpath . $sid . "_consensus_fdranalysis" . ".png";
			$cmd = "perl RunConsensusGraphics.pl -V $out_verbosePeptideOutput -I $consensus_graphics_file -R $revString -D $decoySize\n";
			print SHELL $cmd;
		}
	}
	print SHELL "cd ".$local_cgibin."\n";
	print SHELL "perl WriteStatus.pl -F $statusFile -T Creating_Summary\n";
	print SHELL "cd ".$local_cgibin."MzIdentMLPipeline"."\n";

	#Summary
	$cmd = "perl RunSummary.pl -V $out_verbosePeptideOutput -S $summary_file -D $decoySize -T 0.01,0.05"; #DCW - last param (FDR cutoffs) should be set by user
	if($session->param("nterminal"))
	{
		$cmd .= " -N";
	}
	if($session->param("combine"))
	{
		$cmd .= " -C";
	}
	$cmd .= "\n";
	#$cmd = "perl RunSummary.pl $out_verbosePeptideOutput $summary_file $decoySize 0.01,0.05\n"; #DCW - last param (FDR cutoffs) should be set by user
	print SHELL $cmd;

	print SHELL "cd ".$local_cgibin."\n";
	print SHELL "perl WriteStatus.pl -F $statusFile -T Producing_Venn_Diagram\n";
	print SHELL "cd ".$local_cgibin."MzIdentMLPipeline"."\n";

	#Venn diags
	my $vennFile = $summary_file;
	$vennFile =~ s/summary.txt/VennDiagram.png/;
	$cmd = "perl RunVenn.pl -F $vennFile -V $out_verbosePeptideOutput -T 0.05"; #DCW - last param (FDR cutoff) should be set by user
	if($session->param("combine"))
	{
		$cmd .= " -C";
	}
	$cmd .= "\n";
	#$cmd = "perl RunVenn.pl $vennFile $out_verbosePeptideOutput 0.05\n"; #DCW - last param (FDR cutoff) should be set by user
	print SHELL $cmd;

	#GenerateVennFromVerboseFile($vennFile,$opt_V, 0.05); #DCW - last param (FDR cutoff) should be set by user

	print SHELL "cd ".$local_cgibin."\n";
	print SHELL "perl WriteStatus.pl -F $statusFile -T Producing_Output_File\n";
	
	## Need to convert the final Protein ambiguity group csv file to mzid
	my $out_protGroupTemp = $local_dir."tempProtAmbg_".$sid.".mzid";
	
	#chdir("web-based-multiplesearch\\src\\Parsers"); # change directory to where the parser source code is...
	print SHELL "cd ".$local_cgibin."Parsers"."\n";
	#my $parseCmd = "perl csv2mzIdentML.pl $out_csvForMzId $omssaParamFileName $out_protGroupTemp";
	my $parseCmd = "perl csv2mzIdentML.pl $out_csvForMzId $omssaParamFileName $out_protGroupTemp -protein_grouping";
	print PARAM "\n\n $parseCmd";
	print SHELL $parseCmd."\n";
	#system($parseCmd);
	#chdir($currentWorkdir ); # come back to the original directory
	
	## Produce the final protein ambiguity group mzid file
	my $out_protGroupMzId = $local_dir."FinalProtAmbg_".$sid.".mzid";
	
	#chdir("web-based-multiplesearch\\src\\MzIdentMLPipeline"); # change directory to where the source code is...
	print SHELL "cd ".$local_cgibin."MzIdentMLPipeline"."\n";
	my $finalCmd = "perl testcode.pl $out_csvForMzId $out_protGroupTemp $out_protGroupMzId";
	print PARAM "\n\n $finalCmd";
	#system($finalCmd);  #DCW - commented out
	print SHELL $finalCmd."\n"; 

	my $newProtAmbigFile = $out_protGroupMzId;
	$newProtAmbigFile =~ s/$local_dir/$local_webpath/;
	my $copycmd = "cp " . $out_protGroupMzId . " " . $newProtAmbigFile;
	print SHELL $copycmd."\n";

	if($email_cmd)
	{
		print SHELL "cd ".$local_cgibin."\n";
		print SHELL $email_cmd."\n";
		#system($email_cmd);
	}	
	
	close SHELL;	
	close PARAM;

	my $sys_call = $QSUB." -q www -o " . $local_dir . " -e " . $local_dir . " " . $shell . " &";
	#print "syscall is $sys_call\n";
	system($sys_call);
	
	return 1;
}


# The subroutine to call the mzIdentML parsers in case they need to be called...
# @date december 16,2009
# @author Ritesh
sub callTheMzIdentMLParser
{
			      
	my($file_1,$file1_type,$file_2,$file2_type,$file_3,$file3_type,$omssaParamFileName,$tandemParamFileName) = @_;
	
	my ($name_1, $path_1, $extension_1, $name_2, $path_2, $extension_2, $name_3, $path_3, $extension_3, $file_Upload1_afterParserCall, $file_Upload2_afterParserCall, $file_Upload3_afterParserCall);
	## Add the mzid extension for the files to be converted...
	if($file_1)
	{
		( $name_1, $path_1, $extension_1 ) = fileparse ( $file_1, '\..*' );
		$session->param("file1_after_parser", $local_dir.$name_1. '.mzid');#persistent variable
		#$file_Upload1_afterParserCall = $local_dir.$name_1. '.mzid';
	}	

	#print("<br>FILE 2=".$file_2."<br>");

	if($file_2)
	{	
		( $name_2, $path_2, $extension_2 ) = fileparse ( $file_2, '\..*' );
		$session->param("file2_after_parser", $local_dir.$name_2. '.mzid');#persistent variable
		#$file_Upload2_afterParserCall = $local_dir.$name_2. '.mzid';
	}	

	#print("<br>FILE 2 after parser=".$session->param("file2_after_parser")."<br>");
	#print("FILE 3=".$file_3."<br>");
	if($file_3)
	{
		( $name_3, $path_3, $extension_3 ) = fileparse ( $file_3, '\..*' );
		$session->param("file3_after_parser", $local_dir.$name_3. '.mzid');#persistent variable
		#$file_Upload3_afterParserCall = $local_dir.$name_3. '.mzid';
	}		
	#print("FILE 3 after parser=".$session->param("file3_after_parser")."<br>");	
	
	######## determine the type of parser to call.....##################
	my $file1_parserCall;
	if ($file1_type eq 'Mascot (.dat File)'){
		$file1_parserCall = 'Mascot';
		#$mascotInputFile = $file1;
	}elsif ($file1_type eq 'OMSSA (.csv File)'){
		$file1_parserCall = 'Omssa';
		#$omssaInputFile = $file1;
	}elsif ($file1_type eq 'X!Tandem (.xml File)'){
		$file1_parserCall = 'X!Tandem';
		#$tandemInputFile = $file1;
	}else {
		$file1_parserCall = 'mzid';
	}
	
	my $file2_parserCall;
	if ($file2_type eq 'Mascot (.dat File)'){
			$file2_parserCall = 'Mascot';
			#$mascotInputFile = $file2;
	}elsif ($file2_type eq 'OMSSA (.csv File)'){
			$file2_parserCall = 'Omssa';
			#$omssaInputFile = $file2;
	}elsif ($file2_type eq 'X!Tandem (.xml File)'){
			$file2_parserCall = 'X!Tandem';
			#$tandemInputFile = $file2;
	}else {
		$file2_parserCall = 'mzid';
	}
	
	my $file3_parserCall;
	if ($file3_type eq 'Mascot (.dat File)'){
			$file3_parserCall = 'Mascot';
			#$mascotInputFile = $file3;
	}elsif ($file3_type eq 'OMSSA (.csv File)'){
			$file3_parserCall = 'Omssa';
			#$omssaInputFile = $file3;
	}elsif ($file3_type eq 'X!Tandem (.xml File)'){
			$file3_parserCall = 'X!Tandem';
			#$tandemInputFile = $file3;
	}else {
		$file3_parserCall = 'mzid';
	}
	
	######### Prepare the command to call parsers ########################
	
	my $tempCmd;
	my @cmdToExecuteMascot; ## Store the commands for Mascot to be executed in an Array
	my @cmdToExecute;       ## Store the commands for Omssa and X!Tandem to be executed in an Array
	
	# If the file types are nt mzIdentML, call the parsers...
	if ($session->param("se1") && $file1_parserCall ne 'mzid'){
		if ($file1_parserCall eq 'Mascot'){
			$tempCmd = "cp ".$local_dir.$file_1." ".$local_webpath."input_files\nperl export_dat_2_Dec09.pl file=".$local_webpath."input_files/".$file_1." do_export=1 export_format=mzIdentML _ignoreionsscorebelow=0 _server_mudpit_switch=0.001 _requireboldred=0 _showallfromerrortolerant=0 _onlyerrortolerant=0 _noerrortolerant=0 show_same_sets=1 _showsubsets=1 _sigthreshold=0.05 report=0 unigene=0 _show_decoy_report=0 search_master=1 show_format=1 show_header=1 show_masses=1 show_params=1 show_mods=1 show_decoy=0 show_unassigned=1 protein_master=1 prot_desc=1 prot_score=1 prot_expect=0.05 prot_mass=1 prot_matches=1 prot_cover=1 prot_len=1 prot_pi=0 prot_tax_str=1 prot_tax_id=1 prot_seq=1 prot_empai=0  prot_quant=0 peptide_master=1 pep_exp_mr=1 pep_exp_z=1 pep_calc_mr=1 pep_delta=1 pep_start=1 pep_end=1 pep_miss=1 pep_score=1 pep_homol=1 pep_ident=1 pep_expect=1 pep_rank=1 pep_seq=1 pep_frame=1 pep_var_mod=1 pep_num_match=1 pep_scan_title=1 pep_quant=0  query_all=1 > ".$session->param("file1_after_parser");
			#$tempCmd = "cp ".$local_dir.$file_1." ".$local_webpath."input_files\nperl export_dat_2_Dec09.pl file=".$local_webpath."input_files/".$file_1." do_export=1 export_format=mzIdentML _ignoreionsscorebelow=0 _server_mudpit_switch=0.001 _requireboldred=0 _showallfromerrortolerant=0 _onlyerrortolerant=0 _noerrortolerant=0 show_same_sets=1 _showsubsets=1 _sigthreshold=1.0 report=0 unigene=0 _show_decoy_report=0 search_master=1 show_format=1 show_header=1 show_masses=1 show_params=1 show_mods=1 show_decoy=1 show_unassigned=1 protein_master=1 prot_desc=1 prot_score=1 prot_expect=1000 prot_mass=1 prot_matches=1 prot_cover=1 prot_len=1 prot_pi=0 prot_tax_str=1 prot_tax_id=1 prot_seq=1 prot_empai=0  prot_quant=0 peptide_master=1 pep_exp_mr=1 pep_exp_z=1 pep_calc_mr=1 pep_delta=1 pep_start=1 pep_end=1 pep_miss=1 pep_score=1 pep_homol=1 pep_ident=1 pep_expect=1 pep_rank=1 pep_seq=1 pep_frame=1 pep_var_mod=1 pep_num_match=1 pep_scan_title=1 pep_quant=0  query_all=1 > ".$session->param("file1_after_parser");
			push(@cmdToExecuteMascot,$tempCmd);
		}elsif($file1_parserCall eq 'Omssa'){
			$tempCmd = "perl csv2mzIdentML.pl $local_dir$file_1 $omssaParamFileName ".$session->param("file1_after_parser");
			push(@cmdToExecute,$tempCmd);
		}elsif($file1_parserCall eq 'X!Tandem'){
			$tempCmd = "perl Tandem2mzIdentML.pl $local_dir$file_1 $tandemParamFileName ".$session->param("file1_after_parser");
			push(@cmdToExecute,$tempCmd);
		}
	}
	
	if ($session->param("se2") && $file2_parserCall ne 'mzid'){
		if ($file2_parserCall eq 'Mascot'){
			$tempCmd = "cp ".$local_dir.$file_2." ".$local_webpath."input_files\nperl export_dat_2_Dec09.pl file=".$local_webpath."input_files/".$file_2." do_export=1 export_format=mzIdentML _ignoreionsscorebelow=0 _server_mudpit_switch=0.001 _requireboldred=0 _showallfromerrortolerant=0 _onlyerrortolerant=0 _noerrortolerant=0 show_same_sets=1 _showsubsets=1 _sigthreshold=0.05 report=0 unigene=0 _show_decoy_report=0 search_master=1 show_format=1 show_header=1 show_masses=1 show_params=1 show_mods=1 show_decoy=0 show_unassigned=1 protein_master=1 prot_desc=1 prot_score=1 prot_expect=0.05 prot_mass=1 prot_matches=1 prot_cover=1 prot_len=1 prot_pi=0 prot_tax_str=1 prot_tax_id=1 prot_seq=1 prot_empai=0  prot_quant=0 peptide_master=1 pep_exp_mr=1 pep_exp_z=1 pep_calc_mr=1 pep_delta=1 pep_start=1 pep_end=1 pep_miss=1 pep_score=1 pep_homol=1 pep_ident=1 pep_expect=1 pep_rank=1 pep_seq=1 pep_frame=1 pep_var_mod=1 pep_num_match=1 pep_scan_title=1 pep_quant=0  query_all=1 > ".$session->param("file2_after_parser");
			push(@cmdToExecuteMascot,$tempCmd);
		}elsif($file2_parserCall eq 'Omssa'){
			$tempCmd = "perl csv2mzIdentML.pl $local_dir$file_2 $omssaParamFileName ".$session->param("file2_after_parser");
			push(@cmdToExecute,$tempCmd);
		}elsif($file2_parserCall eq 'X!Tandem'){
			$tempCmd = "perl Tandem2mzIdentML.pl $local_dir$file_2 $tandemParamFileName ".$session->param("file2_after_parser");

			push(@cmdToExecute,$tempCmd);
		}
	}
	
	if ($session->param("se3") && $file3_parserCall ne 'mzid'){
		if ($file3_parserCall eq 'Mascot'){
			$tempCmd = "cp ".$local_dir.$file_3." ".$local_webpath."input_files\nperl export_dat_2_Dec09.pl file=".$local_webpath."input_files/".$file_3." do_export=1 export_format=mzIdentML _ignoreionsscorebelow=0 _server_mudpit_switch=0.001 _requireboldred=0 _showallfromerrortolerant=0 _onlyerrortolerant=0 _noerrortolerant=0 show_same_sets=1 _showsubsets=1 _sigthreshold=0.05 report=0 unigene=0 _show_decoy_report=0 search_master=1 show_format=1 show_header=1 show_masses=1 show_params=1 show_mods=1 show_decoy=0 show_unassigned=1 protein_master=1 prot_desc=1 prot_score=1 prot_expect=0.05 prot_mass=1 prot_matches=1 prot_cover=1 prot_len=1 prot_pi=0 prot_tax_str=1 prot_tax_id=1 prot_seq=1 prot_empai=0  prot_quant=0 peptide_master=1 pep_exp_mr=1 pep_exp_z=1 pep_calc_mr=1 pep_delta=1 pep_start=1 pep_end=1 pep_miss=1 pep_score=1 pep_homol=1 pep_ident=1 pep_expect=1 pep_rank=1 pep_seq=1 pep_frame=1 pep_var_mod=1 pep_num_match=1 pep_scan_title=1 pep_quant=0  query_all=1 > ".$session->param("file3_after_parser");
			push(@cmdToExecuteMascot,$tempCmd);
		}elsif($file3_parserCall eq 'Omssa'){
			$tempCmd = "perl csv2mzIdentML.pl $local_dir$file_3 $omssaParamFileName ".$session->param("file3_after_parser");
			push(@cmdToExecute,$tempCmd);
		}elsif($file3_parserCall eq 'X!Tandem'){
			$tempCmd = "perl Tandem2mzIdentML.pl $local_dir$file_3 $tandemParamFileName ".$session->param("file3_after_parser");
			push(@cmdToExecute,$tempCmd);
		}
	}
	
	my $currentWorkdir = getcwd();
	
	open(PARAM,">CmdFile"); 
	###################  Execute the Omssa and X!Tandem commands here... ################################
	#chdir("web-based-multiplesearch\\src\\Parsers"); # change directory to where the source code is...
	#chdir($local_cgibin."Parsers"); # change directory to where the source code is...
	#DCW - use SGE
	open(SHELL,">>$shell") or die "unable to open shell file, $shell\n";	

	if(@cmdToExecute || @cmdToExecuteMascot)
	{
		my $statusFile = $local_webpath . $session->id . "_status.txt";
		print SHELL "cd ".$local_cgibin."\n";
		print SHELL "perl WriteStatus.pl -F $statusFile -T Converting_Files_To_mzident\n";
	}

	print SHELL "cd ".$local_cgibin."Parsers\n";
	foreach my $index(@cmdToExecute){
		#DCW - use SGE
		print SHELL $index;
		print SHELL "\n";
		#system($index);        
		print PARAM "\n\n $index";
	}
	#print SHELL "cd ".$local_cgibin."\n"; #DCW
	print SHELL "cd ".$local_cgibin."/perl_scripts/src\n"; #DCW - unusual location required to get export_dat to work
	
	#chdir($currentWorkdir ); # come back to the original directory
	###################  Execute the Mascot commands here... ################################
	foreach my $index(@cmdToExecuteMascot){
			print SHELL $index;
			print SHELL "\n";
			#system($index);   
			print PARAM "\n\n $index";
	}
	#print SHELL "cd ".$currentWorkdir."\n";
	close SHELL;	
	close PARAM;
}

### subroutine to create the param file for parsers
# @return The path name of the param file created
# @date december 17,2009
# @author Ritesh
sub createParamFileForParsers
{
	open(PARAM,">>CmdFile"); 
	
	my %infoFromWebPage;
	$infoFromWebPage{'databaseFile'}           = "No File";
	$infoFromWebPage{'providerName'}           = "Anonymous";
	$infoFromWebPage{'parentMassType'}         = $session->param("parent_mass_type");
	$infoFromWebPage{'fragmentMassType'}       = $session->param("parent_mass_type");
	$infoFromWebPage{'enzyme'}                 = $session->param("enzyme"); 
	$infoFromWebPage{'missingCleavage'}        = $session->param("missed"); 
	$infoFromWebPage{'fragmentTolerancePlus'}  = $session->param("fragment_tolerance");
	$infoFromWebPage{'fragmentToleranceMinus'} = $session->param("fragment_tolerance");
	$infoFromWebPage{'parentTolerancePlus'}    = $session->param("parent_tolerance"); 
	$infoFromWebPage{'parentToleranceMinus'}   = $session->param("parent_tolerance"); 
	$infoFromWebPage{'databaseFileFormat'}     = "No File";
	$infoFromWebPage{'databaseFileComposition'}= "No File"; 
	$infoFromWebPage{'decoyString'}            = $cgi->param("rev_tag");

	my @fixedModFromWeb = $cgi->param("fixed_mods");
	my @varModsFromWeb  = $cgi->param("variable_mods");
 
	#my $mapFileNameFromWeb = "UMOD_TABLE.csv"; 
	my $mapFileNameFromWeb = $local_cgibin."UMOD_TABLE.csv"; 
	my $writeFileNameFromWeb = $local_dir."Out_omssa_".$sid."csv";

	#chdir("web-based-multiplesearch\\src\\webBasedParserCalls");		

	CreateCSVParamFileForOmssa::createParamFile(\%infoFromWebPage,\@fixedModFromWeb,\@varModsFromWeb,$mapFileNameFromWeb,$writeFileNameFromWeb);
	
	#chdir("$webpath"); # come back to the original directory...
	
	print PARAM Dumper(\%infoFromWebPage);
	print PARAM "\n  @fixedModFromWeb \n";
	print PARAM "\n  @varModsFromWeb  \n";
	close PARAM;
	
	return $writeFileNameFromWeb;
}

sub validateEmail
{
	my $send_to = shift;
	if (Email::Valid->address($send_to))
	{
		#print "A download link will be emailed to you once the analysis is complete.<br>";
		return 1;
	}
	else
	{
		$session->param("result_access","wait");
		print "You supplied an invalid email address. Please either<br>(1) use the back button in your browser and try again or<br>(2) wait for your results<br>";
		return 0;
	}
}